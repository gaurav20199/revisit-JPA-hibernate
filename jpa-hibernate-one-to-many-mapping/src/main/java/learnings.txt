One To Many Mapping
They can be UniDirectional as well as BiDirectional.

UniDirectional One To Many Mapping
In One to Many Mapping ownership is always at the many side(here it is comment side)
There can be 2 ways to represent one to many unidirectional mapping::
1) Unidirectional relationship from the Comment side(Comment becomes the owner of the relationship)
2) Comment is still the owner of the Relationship but writing Relationship from the opposite side of the ownership.

Establishing Relationship from Post side But Comment is still owner.
1) Defining just one to many mapping from Post side where comment still holds the ownership will lead to generation of
extra tables in db. So one to many mapping from Code side(Object side) will appear to be a many-to-many mapping from db.
Reason is:: There is no way for Hibernate to know how to create Foreign Key since JPA implementation(Hibernate)
don't know how to create foreign key when owner is on opposite side and Relationship is established from diff end.
The third table created by Hibernate is known as Join Table.
IMP::
2) To Mitigate the above issue, we will have to tell Hibernate which is the foreign key by using the Join Column
annotation. This is the only time JoinColumn annotation is used on an entity who is not the Owner.

BiDirectional One-to-Many Relationship.
1) Mapped by attribute has to be used on the opposite side of the ownership.
2) JoinColumn is not mandatory if not used Hibernate can create foreign key on its own.
3) In case of cascade each side has it(s) own logic of cascading, and it might or might not be same for entities that are
part of the relationship. So cascading on Post, Comments can be different as well.

Fetching Strategy
1) For Collections fetching strategy by default is Lazy, and it should be changed to Eager as per use case.
Loading a lot of parent entities which can have a lot of children might lead to Out of Memory error.
2) For Normal Object it is eager.
3) For Use case, User and Roles where user can have many roles. It would be required to have roles as Eager since the
roles will be used in most of the queries for User so hence makes sense to load it eagerly.
4) As a rule if The annotation used is @....ToMany strategy will be Lazy and @...ToOne it will be eager by default.

Where should Foreign Key be??
Foreign key should be always at the ownership side.
It usually should be on the many side, and it makes sense as well if seen from SQL pov as well.
In this case since we are saying One Post can have many comments so Foreign Key will be on Comment side.
Foreign key will be Generated by Hibernate if join column info is not provided.

Orphan Removal Attribute
orphanRemoval mechanism allows us to trigger a remove operation on the disassociated child entity from Parent.
If it(s) set to true whenever child entity disassociate from Parent it will be deleted from db as well.
It is different from CascadeType.Remove where it means that if Parent is removed then all the children should be
removed too.